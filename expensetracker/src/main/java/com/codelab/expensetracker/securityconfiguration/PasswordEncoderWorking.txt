
What is a Salt?
A salt is a random string of characters that is added to a password before hashing it.
The primary purpose of a salt is to prevent attacks such as
rainbow table attacks and to ensure that identical passwords do not result in the same hash.

---------------------------------------------------------------------------------------------

register :  Password + Salt → Hash (stored in DB).
login    :  Password + Stored Salt → Re-calculated Hash → Comparison with Stored Hash.

---------------------------------------------------------------------------------------------

Salt is Generated: When a user sets their password,
                    a random salt is generated.
                    This salt is unique for each password.

Password + Salt: The plain-text password (e.g., "asdfghj")
                 is combined with the salt, and the resulting combination is hashed.

Hashing Process: The resulting hash is stored in the database,
                along with the salt (the salt is stored as part of the hash string, not separately).

Login Attempt: When a user logs in and enters their password, the system:

                Retrieves the stored hash from the database.
                Extracts the salt from the stored hash.
                Combines the entered plain-text password with the extracted salt.
                Re-hashes the combined value.
                Compares the newly hashed value with the stored hash.


---------------------------------------------------------------------------------------------

1.Registration (First Time):
                            Plain-text password: "asdfghj"
                            A random salt is generated: "random_salt_1"
                            The salt is combined with the password:
                                  "asdfghj + random_salt_1"

                            The resulting hash is stored in the database:
                                  $2a$10$random_salt_1$abcdef1234567890

2.User Login Attempt
                            The user enters their plain-text password (e.g., "asdfghj")
                            in the login form.

                            The system receives the plain-text password and
                            retrieves the user's stored salt and
                            hashed password from the database.

                            In your database, you have the following information:
                            Salt (which was generated and stored during registration).
                            Hashed Password (bcrypt hash of the password combined with the salt)

                            The system now takes the plain-text password ("asdfghj")
                            entered by the user during login.
                            The system uses the same salt (random_salt_1)
                            stored in the database to hash the entered password.

                            After the hash of the entered password is generated,
                            the system compares this hash with the stored hash in the database.

                            If they match, it means that the user entered the correct password,
                            and the authentication is successful.
                            If they don't match,
                            the authentication fails (the password is incorrect).

---------------------------------------------------------------------------------------------


